name: typespec-compile-and-deploy-gh-pages
on:
  push:
    branches:
      - main

jobs:
  compile:
    runs-on: ubuntu-24.04
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install typespec
        run: npm install -g @typespec/compiler

      - name: Cache npm modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install node_modules
        run: npm install

      - name: Compile typespec
        run: tsp compile ./spec

      - name: Install redocly-cli
        uses: ./.github/actions/install-redocly-cli

      - name: Find latest OpenAPI file by semantic version
        id: find-file
        run: |
          # セマンティックバージョンでソートして最新を取得
          LATEST_FILE=$(ls tsp-output/@typespec/openapi3/openapi.v*.yaml | \
            sed 's/.*openapi\.v\([0-9]\+\.[0-9]\+\.[0-9]\+\)\.yaml/\1 &/' | \
            sort -V | \
            tail -n1 | \
            cut -d' ' -f2)
          echo "file=$LATEST_FILE" >> $GITHUB_OUTPUT
          echo "Found latest semantic version file: $LATEST_FILE"

      - name: Prepare docs directory structure
        run: |
          mkdir -p ./docs
          
          # 各バージョンのディレクトリを作成し、ファイルをコピー
          for file in tsp-output/@typespec/openapi3/openapi.v*.yaml; do
            if [ -f "$file" ]; then
              # バージョン番号を抽出 (例: openapi.v1.0.0.yaml -> 1.0.0)
              version=$(echo "$file" | sed 's/.*openapi\.v\([0-9]\+\.[0-9]\+\.[0-9]\+\)\.yaml/\1/')
              
              mkdir -p "./docs/v$version"
              
              cp "$file" "./docs/v$version/openapi.yaml"
              
              echo "Created docs for version: v$version"
            fi
          done

      - name: Build docs
        run: redocly build-docs ${{ steps.find-file.outputs.file }} -o ./docs/index.html -t ./.github/template.hbs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs

  deploy-github-pages:
    needs: compile
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-24.04
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
